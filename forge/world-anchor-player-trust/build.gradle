buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0.0'
group = 'com.worldanchor' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = projectDir.getName() + "-forge-mc" + "1.17.1"

// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

minecraft {
    mappings channel: 'official', version: '1.17.1'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}
configurations {
    embed
    emdebFile
    implementation.extendsFrom(embed, embedFile)
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.43'
    annotationProcessor 'org.spongepowered:mixin:0.8.3:processor'
    embed 'org.spongepowered:mixin:0.8.3'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "examplemod",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "examplemodsareus",
                "TweakClass"              : "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder"              : "0",
                "MixinConfigs": projectDir.getName() + ".mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')



mixin {
    add sourceSets.main, projectDir.getName() + ".refmap.json"
}



// Runs batch script to auto copy mod to mods folder on local on dedicated server
// and then start minecraft locally and start the dedicated minecraft server
task runDedicatedTest(type: Exec, dependsOn: check) {
    commandLine 'cmd', '/c', "..\\..\\BuildToDevServer.bat" +
            " " + projectDir.getName() + " " + archivesBaseName + "-" + version + ".jar"
}
build.dependsOn runDedicatedTest

// Runs batch script to auto copy builds from build server
task getStructuresFromBuildServer(type: Exec, dependsOn: compileJava) {
    commandLine 'cmd', '/c', "..\\..\\GetStructuresFromBuildServer.bat"
}
processResources.dependsOn getStructuresFromBuildServer