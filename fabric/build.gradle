plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16


archivesBaseName = projectDir.getName() + "-fabric-mc" + "1.17.1"
version = project.mod_version
group = "com.worldanchor"

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// check these on https://fabricmc.net/versions.html
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:" + "1.17.1"
	mappings minecraft.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:" + "0.11.6"
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:" + "0.37.1+1.17"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 16
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	//withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${projectDir.getName()}"}
	}
}

// Runs batch script to auto copy mod to mods folder on local on dedicated server
// and then start minecraft locally and start the dedicated minecraft server
task runDedicatedTest(type: Exec, dependsOn: check) {
	commandLine 'cmd', '/c', "..\\..\\BuildToDevServer.bat" +
			" " + projectDir.getName() + " " + archivesBaseName + "-" + mod_version + ".jar"
}
build.dependsOn runDedicatedTest

// Runs batch script to auto copy builds from build server
//task getStructuresFromBuildServer(type: Exec, dependsOn: compileJava) {
//	commandLine 'cmd', '/c', "..\\..\\GetStructuresFromBuildServer.bat"
//}
//processResources.dependsOn getStructuresFromBuildServer